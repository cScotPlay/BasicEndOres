plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom'
}
base {
    archivesName = "${mod_name}-fabric-${minecraft_version}"
}
repositories{
//    maven {
//        name = "WTHIT"
//        url "https://maven.bai.lol" }
    maven {
        name = "ModMenu"
        url 'https://maven.terraformersmc.com/releases/' }

    maven {
        name = "JEI"
        url "https://dvs1.progwml6.com/files/maven/"
    }

    maven {
        url = "https://maven.modmuss50.me/"
    }
}
dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

    compileOnly project(":common")

//    modCompileOnly "mcp.mobius.waila:wthit-api:fabric-${project.wthit_version}"
//    modRuntimeOnly "mcp.mobius.waila:wthit:fabric-${project.wthit_version}"

    modCompileOnly "com.terraformersmc:modmenu:${project.modmenu_version}"
    modRuntimeOnly "com.terraformersmc:modmenu:${project.modmenu_version}"

    // compile against the JEI API but do not include it at runtime
    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}")
    // at runtime, use the full JEI jar for Fabric
    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")

    modImplementation "me.zeroeightsix:fiber:0.23.0-2"
    include "me.zeroeightsix:fiber:0.23.0-2"
}

loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
        datagen {
            client()

            setConfigName("Fabric Data Generation")
            ideConfigGenerated(true)
            runDir = "build/datagen"

            vmArg("-Dfabric-api.datagen")
            vmArg("-Dfabric-api.datagen.output-dir=${file("../Fabric/src/main/generated")}")
        }
        datagen {
            client()

            setConfigName("Common Data Generation")
            ideConfigGenerated(true)
            runDir = "build/datagen"

            vmArg("-Dbeo.common_datagen=1")
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("../Common/src/generated/resources")}"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

sourceSets.main.resources {
    srcDirs += 'src/main/generated'
    srcDirs += '../common/src/generated/resources'
}

processResources {
    from project(":common").sourceSets.main.resources

    exclude '.cache'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
